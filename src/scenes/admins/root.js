const { blue, magenta, green, red } = require('colors')
const { Scenes, Markup } = require('telegraf')
const { Keyboard } = require('telegram-keyboard')
const { back, roleOut } = require('../helpers.js')
const { auth } = require('../../http/http.js')
const { admins, addAdmin, delAdmin } = require('../../http/admins.js')
const { Time } = require('../../times.js')

const Root = new Scenes.BaseScene('Root')
const Roles = new Scenes.BaseScene('Roles')
const Admins = new Scenes.BaseScene('Admins')

const AddAdmin = new Scenes.BaseScene('AddAdmin')
const EditAdmin = new Scenes.BaseScene('EditAdmin')
const SelectRoleForAdmin = new Scenes.BaseScene('SelectRoleForAdmin')


Root.enter( async ctx => {
    try {
        if (!(await auth(ctx.session.state.code))) throw new Error()

        const m = await ctx.replyWithHTML(`üöÄ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <code>${ctx.session.state.id}</code>!`, 
            Keyboard.reply([ '–ê–¥–º–∏–Ω—ã', '–ì—Ä—É–ø–ø—ã', '–î–µ–∂—É—Ä–Ω—ã–µ' ], {
                columns: 3,
            }),
        )
        ctx.session.state.last = m.message_id
    } catch (e) {
        ctx.session.state = {}
    }
})
.hears('–ê–¥–º–∏–Ω—ã', async ctx => ctx.scene.enter('Roles'))
.hears('–ì—Ä—É–ø–ø—ã', async ctx => ctx.scene.enter('Groups'))
.hears('–î–µ–∂—É—Ä–Ω—ã–µ', async ctx => ctx.scene.enter('DutyAdmin'))
.leave( async (ctx, next) => {
    try { 
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.state.last)
        next()
    } catch (e) {}
})


Roles.enter( async ctx => {
    try {
        if (!(await auth(ctx.session.state.code))) throw new Error()

        const m = await ctx.replyWithHTML(`üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ`, 
            Keyboard.reply([ '–°–ø–∏—Å–æ–∫', '–î–æ–±–∞–≤–∏—Ç—å', '–ù–∞–∑–∞–¥' ], {
                columns: 3,
            }),
        )
        ctx.session.state.last = m.message_id
    } catch (e) {
        ctx.session.state = {}
    }
})
.hears('–ù–∞–∑–∞–¥', ctx => back(ctx))
.hears('–°–ø–∏—Å–æ–∫', ctx => ctx.scene.enter('Admins'))
.hears('–î–æ–±–∞–≤–∏—Ç—å', ctx => ctx.scene.enter('AddAdmin'))
.leave( async (ctx, next) => {
    try { 
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.state.last)
        next()
    } catch (e) {}
})


Admins.enter( async ctx => {
    try {
        delete ctx.session.state.inAddAdmin
        delete ctx.session.state.inEditAdmin

        if (!(await auth(ctx.session.state.code))) throw new Error()
        
        let adms = await admins.names(ctx.session.state.code)

        const m = await ctx.replyWithHTML(`üìú –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`, 
            Keyboard.reply([ adms, '–ù–∞–∑–∞–¥' ], {
                columns: 3,
                flat: true,
            }),
        )
        ctx.session.state.last = m.message_id
    } catch (e) {
        console.log(red(`err`))
        ctx.session.state = {}
    }
})
.hears('–ù–∞–∑–∞–¥', ctx => ctx.scene.enter('Roles'))
.on('text', async ctx => {
    try {
        let text = ctx.message.text
        let adms = await admins.names(ctx.session.state.code)
        if (!adms) throw new Error()

        if ( (adms.find(item => item)) ) {
            let res = await admins.find(ctx.session.state.code, ctx.message.text)

            ctx.session.state.inEditAdmin = {
                id: res.id,
                code: res.code,
                role: res.role,
                createdAt: res.createdAt,
            }
            ctx.scene.enter('EditAdmin')
        }

    } catch (e) {
        ctx.session.state = {}
    }
})
.leave( async (ctx, next) => {
    try { 
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.state.last)
        next()
    } catch (e) {}
})


// ------------------


EditAdmin.enter( async ctx => {
    try {
        const { id, code, role, createdAt } = ctx.session.state.inEditAdmin
        const msg = await ctx.replyWithHTML(`üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º <code>${id}</code>\n‚Äî <code>${role}</code>\n‚Äî <code>${code}</code>\n‚Äî —Å–æ–∑–¥–∞–Ω <code>${createdAt}</code>`,
            Keyboard.reply([ '–£–¥–∞–ª–∏—Ç—å', '–ù–∞–∑–∞–¥' ], {
                flat: true,
                columns: 3,
            })
        )
        ctx.session.state.last = msg.message_id
    } catch (e) {
        ctx.replyWithHTML(`<b>‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...</b>`)
    }
})
.hears('–£–¥–∞–ª–∏—Ç—å', async ctx => {
    try {
        const { id, code, role } = ctx.session.state

        let res = await delAdmin(ctx.session.state.code, ctx.session.state.inEditAdmin.id)
        if (!res) throw new Error()

        await ctx.replyWithHTML(`‚úÖ –ê–¥–º–∏–Ω <code>${ctx.session.state.inEditAdmin.id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`)
        console.log(magenta(`[ADMINS] '${ctx.chat.username}' ‚Äî '${id}', with role '${role}' and code '${code}', deleted: '${ctx.session.state.inEditAdmin.id}' ‚Äî '${ctx.session.state.inEditAdmin.role}' ‚Äî '${ctx.session.state.inEditAdmin.code}' in '${(new Time().date(true))}'`))

        delete ctx.session.state.inEditAdmin
        ctx.scene.enter('Admins')
    } catch (e) {
        ctx.session.state = {}
    }
})
.hears('–ù–∞–∑–∞–¥', ctx => ctx.scene.enter('Admins'))
.leave( async (ctx, next) => {
    try { 
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.state.last)
        delete ctx.session.state.inEditAdmin
        next()
    } catch (e) {}
})


// ------------------

AddAdmin.enter( async ctx => {
    const m = await ctx.replyWithHTML(`üìã –ó–∞–¥–∞–π—Ç–µ <b>–ª—é–±–æ–µ</b> –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. \n–ë–µ–∑ –ª–∏—à–Ω–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ü–µ—Ç—Ä—É—à–∫–∏–Ω –ò–°</code>, –∏–ª–∏ <code>–¶–∞—Ä—å</code>`,
        Keyboard.reply([ '–ù–∞–∑–∞–¥' ])
    )
})
.hears('–ù–∞–∑–∞–¥', ctx => ctx.scene.enter('Roles'))
.on('text', async ctx => {
    const text = ctx.message.text
    const iso = text.replace(/[^–ê-–Ø–∞-—è0-9\-]/giu, '').trim()

    try {
        ctx.session.state.inAddAdmin = {
            name: iso,
        }
        ctx.scene.enter('SelectRoleForAdmin')
    } catch (e) {
        ctx.session.state = {}
    }
})
.leave( async (ctx, next) => {
    try { 
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.state.last)
        next()
    } catch (e) {}
})


SelectRoleForAdmin.enter( async ctx => {
    const m = await ctx.replyWithHTML(`üìã –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å`,
        Keyboard.reply([ '–ê–¥–º–∏–Ω', '–î–µ–∂—É—Ä–Ω—ã–π', '–ù–∞–∑–∞–¥' ], {
            columns: 2,
        })
    )
})
.hears('–ù–∞–∑–∞–¥', ctx => ctx.scene.enter('AddAdmin'))
.hears('–ê–¥–º–∏–Ω', async ctx => {
    try {
        const { id, role, code } = ctx.session.state.inAddAdmin
        const admin = await addAdmin(ctx.session.state.code, ctx.session.state.inAddAdmin.name, 'admin')
        
        ctx.scene.enter('Admins')
        ctx.replyWithHTML(`‚úÖ –ê–¥–º–∏–Ω <code>${ctx.session.state.inAddAdmin.name}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`)
        console.log(magenta(`[ADMINS] '${ctx.chat.username}' ‚Äî '${ctx.session.state.id}', with role ${ctx.session.state.role} and code ${ctx.session.state.code}, create: 'ADMIN' | ${ctx.session.state.inAddAdmin.id} in '${new Time().date(true)}'`))

        delete ctx.session.state.inAddAdmin
    } catch (e) {}
})
.hears('–î–µ–∂—É—Ä–Ω—ã–π', async ctx => {
    try {
        const admin = await addAdmin(ctx.session.state.code, ctx.session.state.inAddAdmin.name, 'duty')

        ctx.scene.enter('Admins')
        ctx.replyWithHTML(`‚úÖ –î–µ–∂—É—Ä–Ω—ã–π <code>${ctx.session.state.inAddAdmin.name}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`)

        delete ctx.session.state.inAddAdmin
    } catch (e) {}
})
.hears('–î–µ–∂—É—Ä–Ω—ã–π', ctx => {
    ctx.scene.enter('AddAdmin')
})
.leave( async (ctx, next) => {
    try { 
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.state.last)
        next()
    } catch (e) {}
})


module.exports = { Root, Roles, Admins, AddAdmin, EditAdmin, SelectRoleForAdmin }